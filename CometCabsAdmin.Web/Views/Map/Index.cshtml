@model CometCabsAdmin.Web.Models.MapViewModel
@{
    ViewBag.Title = "Map";
}

<h2>@ViewBag.Title</h2>

<div class="hidden" id="routeTable">
    @Html.Raw(Json.Encode(Model.RouteTable))
</div>
<div class="hidden" id="coordinates">
    @Html.Raw(Json.Encode(Model.RouteCoordinates))
</div>

<div id="scope" ng-controller="MapController">
    <div class="row">
        <div class="col-md-1">
            <ul class="nav nav-pills" style="width: 100px;">
                <li role="presentation">
                    <a href="javascript:void(0)" ng-click="addRoute()">Add Route</a>
                </li>
            </ul>
        </div>
        <div class="col-md-6" style="padding-left: 0px;">
            <div id="map-canvas"></div>
            <div id="routeForm" ng-show="EditMode">
                <div class="panel panel-default">
                    <!-- Default panel contents -->
                    <div class="panel-heading"></div>
                    <div class="panel-body">
                        <form class="form-horizontal" method="post">
                            <input type="hidden" ng-model="routeId" />
                            <div class="form-group">
                                <div class="col-sm-3">
                                    @Html.LabelFor(model => model.RouteName, new { @class = "col-lg-12 control-label" })
                                </div>
                                <div class="col-sm-6">
                                    <input type="text" class="form-control" ng-model="routeName" />
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-sm-3">
                                    @Html.LabelFor(model => model.RouteDesc, new { @class = "col-lg-12 control-label" })
                                </div>
                                <div class="col-sm-6">
                                    <textarea class="form-control" rows="3" ng-model="routeDesc"></textarea>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-sm-3">
                                    @Html.LabelFor(model => model.RouteColor, new { @class = "col-lg-12 control-label" })
                                </div>
                                <div class="col-sm-7">
                                    <select ng-model="selectedColor" ng-options="item.Text for item in colorList">
                                        <option value="">-- select a color --</option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-sm-3">
                                </div>
                                <div class="col-sm-6">
                                    <div class="checkbox">
                                        <label>
                                            <input type="checkbox" ng-model="isActiveRoute" />@Html.DisplayNameFor(model => model.IsActive)
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-sm-offset-4 col-sm-2">
                                    <button id="save-route" type="button" class="btn btn-default" ng-click="saveRoute()">Submit</button>
                                </div>
                                <div class="col-sm-2">
                                    <button id="cancel-changes" type="button" class="btn btn-default" ng-click="discardChanges()">Cancel</button>
                                </div>
                            </div>
                        </form>

                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-5">
            <div class="panel panel-default">
                <!-- Default panel contents -->
                <div class="panel-heading">Routes</div>
                <div class="panel-body">
                    <table class="table table-striped table-hover table-condensed">
                        <thead>
                            <tr>
                                <th>
                                    No.
                                </th>
                                <th>
                                    Route Name
                                </th>
                                <th colspan="2">
                                    Color
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr ng-repeat="route in routeTable">
                                <td>{{ $index + 1 }}</td>
                                <td>{{ route.RouteName }}</td>
                                <td><div style="width: 50px; background-color: {{route.RouteColor}}">&nbsp;&nbsp;</div></td>
                                <td class="icon glyphicon glyphicon-trash" ng-click="deleteRoute(route)" title="Delete route"></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section ViewScripts
{
    <script src="https://maps.googleapis.com/maps/api/js?libraries=drawing,places"></script>
    <script type="text/ng-template" id="delete-dialog">
        <div class="ngdialog-message">
            <h3>Delete Route</h3>
            <p>Route <span style="font-weight: bold;">{{ routeSelected.RouteName }}</span> will be removed permanently.</p>
            <p>Are you sure you want to do this?</p>
        </div>
        <div class="ngdialog-buttons">
            <button type="button" class="ngdialog-button ngdialog-button-primary" ng-click="confirm()">Confirm</button>
            <button type="button" class="ngdialog-button ngdialog-button-secondary" ng-click="closeThisDialog()">Cancel</button>
        </div>
    </script>
    <script type="text/javascript">
        var apiKey = 'AIzaSyBifWbwLg0wIJ9wv7CdP9tjAepH4SzMHC8';

        var directionsDisplay;
        var directionsService = new google.maps.DirectionsService();
        var map = null;
        var drawingManager;
        var placeIdArray = [];
        var polylines = [];
        var snappedCoordinates = [];
        var poly;
        var latlng = new google.maps.MVCArray();
        var selectedRoute;
        var clickListener;
        var rendererOptions = {
            draggable: true
        };

        function initialize() {
            var mapOptions = {
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                zoom: 16,
                center: { lat: 32.98435, lng: -96.748255 },
                minZoom: 15,
                maxZoom: 18,
                disableDefaultUI: true,
                disableDoubleClickZoom: true,
                zoomControl: true,
            };

            var canvas = document.getElementById('map-canvas');

            map = new google.maps.Map(canvas, mapOptions);
            // clickListener = google.maps.event.addListener(map, "click", getMapCoordinate);
        }

        // Snap a user-created polyline to roads and draw the snapped path
        function runSnapToRoad(path, color) {
            $.get('https://roads.googleapis.com/v1/snapToRoads', {
                interpolate: true,
                key: apiKey,
                path: path.join('|')
            }, function (data) {
                processSnapToRoadResponse(data);
                drawSnappedPolyline(color);
                // getAndDrawSpeedLimits();
            });
        }

        // Store snapped polyline returned by the snap-to-road method.
        function processSnapToRoadResponse(data) {
            snappedCoordinates = [];
            placeIdArray = [];
            for (var i = 0; i < data.snappedPoints.length; i++) {
                var latlng = new google.maps.LatLng(
                    data.snappedPoints[i].location.latitude,
                    data.snappedPoints[i].location.longitude);
                snappedCoordinates.push(latlng);
            }
        }

        // Draws the snapped polyline (after processing snap-to-road response).
        function drawSnappedPolyline(color) {
            var snappedPolyline = new google.maps.Polyline({
                path: snappedCoordinates,
                strokeColor: color,
                strokeWeight: 5,
                editable: false
            });

            snappedPolyline.setMap(map);

            clickListener = google.maps.event.addListener(snappedPolyline, 'click', function (latLng) {
                var scope = angular.element($("#scope")).scope();
                scope.editRoute(latLng);
            });

            polylines.push(snappedPolyline);
        }

        // Gets speed limits (for 100 segments at a time) and draws a polyline
        // color-coded by speed limit. Must be called after processing snap-to-road
        // response.
        function getAndDrawSpeedLimits() {
            for (var i = 0; i <= placeIdArray.length / 100; i++) {
                // Ensure that no query exceeds the max 100 placeID limit.
                var start = i * 100;
                var end = Math.min((i + 1) * 100 - 1, placeIdArray.length);

                drawSpeedLimits(start, end);
            }
        }

        // Gets speed limits for a 100-segment path and draws a polyline color-coded by
        // speed limit. Must be called after processing snap-to-road response.
        function drawSpeedLimits(start, end) {
            var placeIdQuery = '';
            for (var i = start; i < end; i++) {
                placeIdQuery += '&placeId=' + placeIdArray[i];
            }

            $.get('https://roads.googleapis.com/v1/speedLimits',
                'key=' + apiKey + placeIdQuery,
                function (speedData) {
                    processSpeedLimitResponse(speedData, start);
                }
            );
        }

        // Draw a polyline segment (up to 100 road segments) color-coded by speed limit.
        function processSpeedLimitResponse(speedData, start) {
            var end = start + speedData.speedLimits.length;
            for (var i = 0; i < speedData.speedLimits.length - 1; i++) {
                var speedLimit = speedData.speedLimits[i].speedLimit;
                var color = getColorForSpeed(speedLimit);

                // Take two points for a single-segment polyline.
                var coords = snappedCoordinates.slice(start + i, start + i + 2);

                var snappedPolyline = new google.maps.Polyline({
                    path: coords,
                    strokeColor: color,
                    strokeWeight: 6
                });

                snappedPolyline.setMap(map);
                polylines.push(snappedPolyline);
            }
        }

        function getColorForSpeed(speed_kph) {
            if (speed_kph <= 40) {
                return 'purple';
            }
            if (speed_kph <= 50) {
                return 'blue';
            }
            if (speed_kph <= 60) {
                return 'green';
            }
            if (speed_kph <= 80) {
                return 'yellow';
            }
            if (speed_kph <= 100) {
                return 'orange';
            }
            return 'red';
        }

        function parseDirection(result) {
            var data = result.routes[0].legs[0];
            var direction = [];

            var start = data.start_location;
            direction.push({ TagName: 'origin', Latitude: start.k, Longitude: start.D });

            var waypoints = data.via_waypoints;

            $.each(waypoints, function (index, value) {
                direction.push({ TagName: 'waypoint', Latitude: value.k, Longitude: value.D });
            });

            var end = data.end_location;
            direction.push({ TagName: 'end', Latitude: end.k, Longitude: end.D });

            return direction;
        }

        function resetMap() {
            latlng = new google.maps.MVCArray();
            poly = null;
            directionsDisplay.setMap(null);
            map.setOptions({ draggableCursor: 'default' });
            // clickListener.remove();
            // clickListener = google.maps.event.addListener(map, "click", getMapCoordinate);
        }

        $(window).load(initialize);

        //google.maps.event.addListener(map, "click", function (evt) {
        //    alert(evt);
        //});

        (function (angular) {
            'use strict';
            // D: longitude
            // k: latitude
            var app = angular.module('CometCabs', ['ngRoute', 'ngDialog']);

            app.config(['ngDialogProvider', function (ngDialogProvider) {
                ngDialogProvider.setDefaults({
                    className: 'ngdialog-theme-default',
                    plain: false,
                    showClose: true,
                    closeByDocument: true,
                    closeByEscape: true,
                    appendTo: false,
                    preCloseCallback: function () {
                        console.log('default pre-close callback');
                    }
                });
            }]);

            // DONE: add confirmation dialog
            // TODO: cancelling drawing map should remove route
            // TODO: show information status (figure out how to use partial in angularjs)
            // TODO: edit/update route
            // DONE: delete route
            // TODO: add campus map overlay
            // TODO: remove color(s) that have been used in route map

            app.controller('MapController', ['$scope', '$http', '$route', 'ngDialog', function ($scope, $http, $route, ngDialog) {
                $scope.counter = 0;
                $scope.routeTable = JSON.parse($('#routeTable').html());
                $scope.routeCoordinates = JSON.parse($('#coordinates').html());
                $scope.routeDirections = [];

                $scope.routeId = 0;
                $scope.routeName = '';
                $scope.routeDesc = '';
                $scope.selectedColor = '';
                $scope.isActiveRoute = false;

                $scope.colorList = [
                    { Text: "Gray", Value: "Gray" },
                    { Text: "Red", Value: "Red" },
                    { Text: "Orange", Value: "Orange" },
                    { Text: "Yellow", Value: "Yellow" },
                    { Text: "Green", Value: "Green" },
                    { Text: "Blue", Value: "Blue" },
                    { Text: "Purple", Value: "Purple" },
                    { Text: "Teal", Value: "Teal" },
                ];

                $scope.EditMode = false;
                $scope.EditCaption = 'Create Route';
                $scope.routeSelected = [];

                $scope.discardChanges = function () {
                    $scope.EditMode = false;
                    resetMap();
                };

                $scope.addRoute = function (param) {
                    var routeId = { id: 0 };

                    if (param != undefined) {
                        routeId = JSON.stringify(param);
                    }

                    $scope.EditMode = true;
                    directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
                    map.setOptions({ draggableCursor: 'crosshair' });
                    directionsDisplay.setMap(map);
                    poly = new google.maps.Polyline({ map: map });
                    // clickListener.remove();

                    clickListener = google.maps.event.addListener(map, "click", function (evt) {
                        if (latlng.length === 0) {
                            latlng.push(evt.latLng);
                            poly.setPath(latlng);
                        } else {
                            directionsService.route({
                                origin: latlng.getAt(latlng.getLength() - 1),
                                destination: evt.latLng,
                                travelMode: google.maps.DirectionsTravelMode.WALKING
                            }, function (result, status) {
                                if (status == google.maps.DirectionsStatus.OK) {
                                    directionsDisplay.setDirections(result);
                                    $scope.routeDirections = parseDirection(result);
                                }
                            });
                        }
                    });

                    google.maps.event.addListener(directionsDisplay, 'directions_changed', function () {
                        var result = directionsDisplay.getDirections();
                        $scope.snappedCoordinates = result.routes[0].overview_path;
                        $scope.routeDirections = parseDirection(result);
                    });
                };

                $scope.editRoute = function (args) {
                    // console.log(args);                    
                    var coordinate = {
                        latitude: args.latLng.k,
                        longitude: args.latLng.D,
                    };

                    $http({ method: 'POST', url: '/Map/GetRoute', contentType: 'application/json', data: coordinate })
                        .success(function (data) {
                            // console.log(data);
                            $scope.EditMode = typeof (data) == 'object';

                            if ($scope.EditMode) {
                                $scope.routeName = data.RouteName;
                                $scope.routeDesc = data.RouteDesc;
                                $scope.selectedColor = data.RouteColor;
                                $scope.isActiveRoute = data.IsActive;
                            }

                        })
                        .error(function (data, status, headers, config) {
                            // called asynchronously if an error occurs
                            // or server returns response with an error status.
                            console.log(data + ' ' + status + ' ' + headers + ' ' + config)
                        });
                }

                $scope.saveRoute = function (event) {
                    var route = {
                        routeId: $scope.routeId,
                        routeName: $scope.routeName,
                        routeDesc: $scope.routeDesc,
                        routeColor: JSON.stringify($scope.selectedColor),
                        isActive: $scope.isActiveRoute,
                        routes: JSON.stringify($scope.snappedCoordinates),
                        directions: JSON.stringify($scope.routeDirections),
                    }

                    $http({ method: 'POST', url: '/Map/SaveRoute', contentType: 'application/json', data: route })
                        .success(function (data) {
                            // resetMap();
                            location.href = '/Map/'
                        })
                        .error(function (data, status, headers, config) {
                            // called asynchronously if an error occurs
                            // or server returns response with an error status.
                            alert(data + ' ' + status + ' ' + headers + ' ' + config)
                        });
                };

                $scope.deleteRoute = function (route) {
                    $scope.routeSelected = route;

                    ngDialog.openConfirm({
                        template: 'delete-dialog',
                        className: 'ngdialog-theme-default',
                        scope: $scope
                    }).then(function () {
                        $http({ method: 'POST', url: '/Map/DeleteRoute', contentType: 'application/json', data: route })//route) })
                            .success(function (data) {
                                location.href = '/Map/'
                            })
                            .error(function (data, status, headers, config) {
                                // called asynchronously if an error occurs
                                // or server returns response with an error status.
                                alert(data + ' ' + status + ' ' + headers + ' ' + config)
                            }
                        );
                    }, function () {

                    });
                };

                for (var route in $scope.routeCoordinates) {
                    var path = [];
                    var color = $scope.routeTable[route].RouteColor;

                    for (var coordinate in $scope.routeCoordinates[route]) {
                        path.push($scope.routeCoordinates[route][coordinate].k + ',' + $scope.routeCoordinates[route][coordinate].D);
                    }

                    runSnapToRoad(path, color)                    
                }
            }]);
        })(window.angular);
    </script>
}
